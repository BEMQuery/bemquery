{"version":3,"file":null,"sources":["../node_modules/bemquery-selector-converter/dist/bemquery-selector-converter.js","../node_modules/bemquery-selector-engine/dist/bemquery-selector-engine.js","../node_modules/bemquery-core/dist/bemquery-core.js","../node_modules/bemquery-async-dom/dist/bemquery-async-dom.js","../node_modules/bemquery-dom-events/dist/bemquery-dom-events.js"],"sourcesContent":["/*! bemquery-selector-converter v0.1.4 | (c) 2016 BEMQuery team | MIT license (see LICENSE) */\n/** Simple class representing selector */\nclass Selector {\n\t/**\n\t * Creates new Selector instance.\n\t *\n\t * @param {String} BEM BEM version of selector.\n\t * @param {String} CSS CSS version of selector.\n\t */\n\tconstructor( BEM, CSS ) {\n\t\t/**\n\t\t * BEM version of selector.\n\t\t *\n\t\t * @property {String}\n\t\t */\n\t\tthis.BEM = BEM;\n\n\t\t/**\n\t\t * CSS version of selector.\n\t\t *\n\t\t * @property {String}\n\t\t */\n\t\tthis.CSS = CSS;\n\n\t\tObject.freeze( this );\n\t}\n}\n\nfunction endsWithModifier( selector, bemConfig ) {\n\tconst regex = new RegExp( `[^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+${bemConfig.modifierSeparator}[^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+$`,\n\t\t'g' );\n\n\treturn !!selector.match( regex );\n}\n\nfunction getSelectorWithoutModifier( selector, modifierSeparator ) {\n\treturn ` ${selector.substring( selector.lastIndexOf( '.' ), selector.lastIndexOf( modifierSeparator ) )}`;\n}\n\nconst defaultConfig = {\n\tbem: {\n\t\telemSeparator: '__',\n\t\tmodifierSeparator: '_'\n\t},\n\trules: {\n\t\tdefault( token ) {\n\t\t\treturn `.${token}`;\n\t\t},\n\n\t\t' > '( token, config ) {\n\t\t\treturn ` ${config.rules.default( token )}`;\n\t\t},\n\n\t\t' '( token, config, selector ) {\n\t\t\tif ( endsWithModifier( selector, config.bem ) ) {\n\t\t\t\treturn `${getSelectorWithoutModifier( selector, config.bem.modifierSeparator )}${config.bem.elemSeparator}${token}`;\n\t\t\t}\n\n\t\t\treturn `${config.bem.elemSeparator}${token}`;\n\t\t},\n\n\t\t':'( token, config ) {\n\t\t\treturn `${config.bem.modifierSeparator}${token}`;\n\t\t}\n\t}\n};\n\nfunction convertToken( tokens, config, selector = '' ) {\n\tconst rules = config.rules;\n\tconst delimeter = tokens.shift();\n\tlet rule;\n\tlet token;\n\n\tif ( !delimeter ) {\n\t\treturn selector;\n\t} else if ( !selector ) {\n\t\ttoken = delimeter;\n\t\trule = rules.default;\n\t} else {\n\t\ttoken = tokens.shift();\n\t\trule = rules[ delimeter ];\n\t}\n\n\tif ( typeof rule !== 'function' ) {\n\t\tthrow new SyntaxError( 'Malformed BEM rule' );\n\t}\n\n\tselector += rule( token, config, selector );\n\n\treturn convertToken( tokens, config, selector );\n}\n\nfunction convert( selector, config ) {\n\tconst rules = Object.keys( config.rules ).filter( ( rule ) => {\n\t\treturn rule !== 'default';\n\t} );\n\tconst splitRule = new RegExp( `(${rules.join( '|' )})`, 'g' );\n\tconst splittedSelector = selector.split( splitRule );\n\n\tselector = convertToken( splittedSelector, config );\n\n\treturn selector;\n}\n\n/** Converter's class*/\nclass Converter {\n\t/**\n\t * Create converter's instance.\n\t *\n\t * @param {Object} [config=defaultConfig] converter's configuration options.\n\t * @class\n\t */\n\tconstructor( config = defaultConfig ) {\n\t\t/**\n\t\t * Converter's configuration\n\t\t *\n\t\t * @property {Object}\n\t\t */\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Converts given selector to CSS.\n\t *\n\t * @param {String} selector BEM selector to be converted.\n\t * @return {Selector} Converted selector.\n\t */\n\tconvert( selector ) {\n\t\tconst convertedSelector = convert( selector, this.config );\n\n\t\treturn new Selector( selector, convertedSelector );\n\t}\n\n\t/**\n\t * Get state from given `[class]` attribute contents.\n\t *\n\t * @param {String} className HTML `[class]` attribute.\n\t * @return {String|null} Fetched state.\n\t */\n\tgetStateFromClass( className ) {\n\t\tif ( typeof className !== 'string' ) {\n\t\t\tthrow new TypeError( 'Class must be a string.' );\n\t\t}\n\n\t\tconst bemConfig = this.config.bem;\n\t\tconst regex = new RegExp( `[^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+${bemConfig.modifierSeparator}([^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+)$` );\n\t\tconst match = className.match( regex );\n\n\t\treturn match ? match[ 1 ] : null;\n\t}\n}\n\n/**\n * BEM selector converter factory.\n *\n * @param {Object} [converterConfig=defaultConverterConfig] Configuration object that\n * should be passed to the Converter constructor.\n * @return {Converter} Converter's instance.\n */\nfunction factory( converterConfig = defaultConfig ) {\n\tconst converter = new Converter( converterConfig );\n\n\treturn converter;\n}\n\nexport { Converter, Selector };export default factory;\n//# sourceMappingURL=bemquery-selector-converter.js.map\n","/*! bemquery-selector-engine v0.2.4 | (c) 2016 BEMQuery team | MIT license (see LICENSE) */\n/** Simple selector engine. */\nclass SelectorEngine {\n\t/**\n\t * Find elements using passed selector.\n\t *\n\t * @param {String} selector CSS selector.\n\t * @param {HTMLElement|Document} context Context\n\t * in which element should be found.\n\t * @returns {HTMLElement[]} Found elements.\n\t */\n\tfind( selector, context = document ) {\n\t\tlet tmpId = false;\n\n\t\tif ( context !== document ) {\n\t\t\tif ( !context.id ) {\n\t\t\t\ttmpId = true;\n\t\t\t\tcontext.id = `BEMQueryTMP_${Date.now()}`;\n\t\t\t}\n\n\t\t\tselector = `#${context.id} ${selector}`;\n\t\t}\n\n\t\tconst elements = Array.from( context.querySelectorAll( selector ) );\n\n\t\tif ( tmpId ) {\n\t\t\tcontext.removeAttribute( 'id' );\n\t\t}\n\n\t\treturn elements;\n\t}\n}\n\nexport default SelectorEngine;\n//# sourceMappingURL=bemquery-selector-engine.js.map\n","/*! bemquery-core v0.1.4 | (c) 2016 BEMQuery team | MIT license (see LICENSE) */\nimport bsc from 'bemquery-selector-converter';\nimport SelectorEngine from 'bemquery-selector-engine';\n\nfunction checkConverter( converter ) {\n\treturn typeof converter === 'object' && typeof converter.convert === 'function';\n}\n\nfunction checkSelectorEngine( selectorEngine ) {\n\treturn typeof selectorEngine === 'object' && typeof selectorEngine.find === 'function';\n}\n\nfunction determineContext( context ) {\n\tif ( context instanceof BEMQuery ) { // eslint-disable-line no-use-before-define\n\t\tcontext = context.elements[ 0 ];\n\t}\n\n\tif ( !( context instanceof HTMLElement ) && context !== document ) {\n\t\tcontext = document;\n\t}\n\n\treturn context;\n}\n\nfunction fetchElements( query, context, converter, selectorEngine ) {\n\tif ( !query ) {\n\t\tthrow new TypeError( 'Selector must be set.' );\n\t}\n\n\tif ( typeof query === 'string' ) {\n\t\tquery = converter.convert( query ).CSS;\n\t\treturn selectorEngine.find( query, context );\n\t} else if ( query instanceof HTMLElement ) {\n\t\treturn [\n\t\t\tquery\n\t\t];\n\t} else if ( query instanceof BEMQuery ) { // eslint-disable-line no-use-before-define\n\t\treturn query.elements;\n\t} else if ( typeof query === 'object' ) {\n\t\treturn Array.from( query );\n\t} else {\n\t\tthrow new TypeError( 'Selector must be a string, object, array or DOM element.' );\n\t}\n}\n\nfunction defineProperties( obj, elements ) {\n\tObject.defineProperty( obj, 'elements', {\n\t\tvalue: elements\n\t} );\n\n\tobj.elements.forEach( ( element, index ) => {\n\t\tObject.defineProperty( obj, index, {\n\t\t\tenumerable: true,\n\t\t\tget() {\n\t\t\t\treturn new BEMQuery( this.elements[ index ], document, this.converter, this.selectorEngine ); // eslint-disable-line no-use-before-define\n\t\t\t}\n\t\t} );\n\t}, obj );\n\n\tObject.defineProperty( obj, 'length', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this.elements.length;\n\t\t}\n\t} );\n}\n\n/** Class representing elements collection. */\nclass BEMQuery {\n\t/**\n\t * Creates elements collection.\n\t *\n\t * @param {String|Iterable|HTMLElement} query Selector or\n\t * existing elements collection upon which the new elements collection\n\t * should be created.\n\t * @param {Document|HTMLElement|BEMQuery} context Context from which\n\t * elements should be fetched.\n\t * @param {Converter} converter BEM selector converter to be used.\n\t * @param {SelectorEngine} selectorEngine CSS selector engine to be used\n\t * by the current and descendant `BEMQuery` instances.\n\t * @class\n\t */\n\tconstructor( query, context, converter, selectorEngine ) {\n\t\tif ( !checkConverter( converter ) ) {\n\t\t\tthrow new TypeError( 'Converter must be an object with convert method defined.' );\n\t\t}\n\n\t\tif ( !checkSelectorEngine( selectorEngine ) ) {\n\t\t\tthrow new TypeError( 'SelectorEngine must be an object with find method defined.' );\n\t\t}\n\n\t\tthis.converter = converter;\n\t\tthis.selectorEngine = selectorEngine;\n\n\t\tcontext = determineContext( context );\n\n\t\tdefineProperties( this, fetchElements( query, context, converter, selectorEngine ) );\n\t}\n\n\t/**\n\t * Gets element with given index.\n\t *\n\t * @param {Number} index Element's index.\n\t * @return {BEMQuery} New BEMQuery instance with fetched element\n\t * as an only element in the collection.\n\t */\n\tget( index ) {\n\t\tindex = Number( index );\n\n\t\tif ( Number.isNaN( index ) ) {\n\t\t\tthrow new TypeError( 'Index must be a correct Number.' );\n\t\t} else if ( index < 0 ) {\n\t\t\tthrow new RangeError( 'Index must be greater or equal to 0.' );\n\t\t} else if ( index > ( this.elements.length - 1 ) ) {\n\t\t\tthrow new RangeError( 'Index cannot be greater than collection\\'s length.' );\n\t\t}\n\n\t\treturn new BEMQuery( this.elements[ index ], document, this.converter, this.selectorEngine );\n\t}\n\n\t/**\n\t * Executes callback on every element in the collection.\n\t *\n\t * @param {Function} callback Callback to be executed.\n\t * @return {BEMQuery} Current `BEMQuery` instance.\n\t */\n\teach( callback ) {\n\t\tif ( typeof callback !== 'function' ) {\n\t\t\tthrow new TypeError( 'Callback must be a function.' );\n\t\t}\n\n\t\tconst converter = this.converter;\n\t\tconst selectorEngine = this.selectorEngine;\n\n\t\tthis.elements.forEach( ( element ) => {\n\t\t\tcallback( new BEMQuery( element, document, converter, selectorEngine ) );\n\t\t} );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns iterator for contained elements.\n\t *\n\t * @return {Iterator} Returned iterator.\n\t */\n\t[ Symbol.iterator ]() {\n\t\tlet i = 0;\n\t\tconst elements = this.elements;\n\t\tconst converter = this.converter;\n\t\tconst selectorEngine = this.selectorEngine;\n\n\t\treturn {\n\t\t\tnext() {\n\t\t\t\tif ( i < elements.length ) {\n\t\t\t\t\tconst element = elements[ i++ ];\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue: new BEMQuery( [ element ], document, converter, selectorEngine ),\n\t\t\t\t\t\tdone: false\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tdone: true\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n}\n\n/**\n * BEMQuery instance factory.\n *\n * @param {String|Iterable|HTMLElement} query Selector or\n * existing elements collection upon which the new elements collection\n * should be created.\n * @param {Document|HTMLElement|BEMQuery} context Context from which\n * elements should be fetched.\n * @return {BEMQuery} New BEMQuery instance.\n */\nfunction factory( query, context = document ) {\n\tconst converter = bsc();\n\tconst selectorEngine = new SelectorEngine();\n\tconst bemQuery = new BEMQuery( query, context, converter, selectorEngine );\n\n\treturn bemQuery;\n}\n\nexport { BEMQuery };export default factory;\n//# sourceMappingURL=bemquery-core.js.map\n","/*! bemquery-async-dom v0.1.4 | (c) 2016 BEMQuery team | MIT license (see LICENSE) */\nimport { BEMQuery } from 'bemquery-core';\n\n/** Class storing queue of DOM operations. */\nclass Batch {\n\t/**\n\t * Constructing new batch.\n\t *\n\t * @class\n\t */\n\tconstructor() {\n\t\tthis.read = [];\n\t\tthis.write = [];\n\t}\n\n\t/**\n\t * Add new operation to the batch.\n\t *\n\t * @param {String} type Type of operation. Must be either \"read\" or \"write\".\n\t * @param {Function} fn Operation to be fired.\n\t * @return {BEMQuery} Current BEMQuery instance.\n\t */\n\tadd( type, fn ) {\n\n\t\tif ( type !== 'read' && type !== 'write' ) {\n\t\t\tthrow new TypeError( 'Type must be either \\'read\\' or \\'write\\'.' );\n\t\t}\n\n\t\tif ( typeof fn !== 'function' ) {\n\t\t\tthrow new TypeError( 'Task must be a function.' );\n\t\t}\n\n\t\tthis[ type ].push( fn );\n\t}\n\n\t/**\n\t * Run operations of given type.\n\t *\n\t * @param {String} type Type of operations to run. Must be either \"read\" or \"write\".\n\t * @return {Promise} Promise that will be fulfilled after running all tasks.\n\t */\n\trun( type = 'read' ) {\n\t\tif ( type !== 'read' && type !== 'write' ) {\n\t\t\tthrow new TypeError( 'Type must be either \\'read\\' or \\'write\\'.' );\n\t\t}\n\n\t\treturn new Promise( ( resolve ) => {\n\t\t\trequestAnimationFrame( () => {\n\t\t\t\tconst results = [];\n\n\t\t\t\tthis[ type ].forEach( ( fn ) => {\n\t\t\t\t\tresults.push( fn() );\n\t\t\t\t} );\n\n\t\t\t\tthis[ type ] = [];\n\n\t\t\t\treturn resolve( results );\n\t\t\t} );\n\t\t} );\n\t}\n}\n\n/**\n * Method that runs all read operations stored in batch\n *\n * @return {Promise} Promise returned by batch.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.read = function() {\n\tif ( !this.batch ) {\n\t\tthis.batch = new Batch();\n\t}\n\n\treturn this.batch.run( 'read' );\n};\n\n/**\n * Method that runs all write operations stored in batch\n *\n * @return {Promise} Promise returned by batch.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.write = function() {\n\tif ( !this.batch ) {\n\t\tthis.batch = new Batch();\n\t}\n\n\treturn this.batch.run( 'write' );\n};\n\n/**\n * Method for getting/setting inner HTML of all elements in collection\n *\n * @param {String} [newHTML] The new inner HTML value. If not specified,\n * the method will work as getter.\n * @return {BEMQuery} Current BEMQuery instance.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.html = function( newHTML ) {\n\tif ( !this.batch ) {\n\t\tthis.batch = new Batch();\n\t}\n\n\tif ( typeof newHTML !== 'undefined' ) {\n\t\tnewHTML = String( newHTML );\n\n\t\tthis.batch.add( 'write', () => {\n\t\t\tconst elements = this.elements;\n\n\t\t\telements.forEach( ( element ) => {\n\t\t\t\telement.innerHTML = newHTML;\n\t\t\t} );\n\t\t} );\n\t} else {\n\t\tthis.batch.add( 'read', () => {\n\t\t\tconst elements = this.elements;\n\t\t\tconst htmls = [];\n\n\t\t\telements.forEach( ( element ) => {\n\t\t\t\thtmls.push( element.innerHTML );\n\t\t\t} );\n\n\t\t\treturn htmls;\n\t\t} );\n\t}\n\n\treturn this;\n};\n\nfunction processClasses( converter, element ) {\n\tconst states = [];\n\n\t[].forEach.call( element.classList, ( className ) => {\n\t\tconst state = converter.getStateFromClass( String( className ) );\n\n\t\tif ( state ) {\n\t\t\tstates.push( state );\n\t\t}\n\t} );\n\n\treturn states;\n}\n\n/**\n * Method for getting states from all elements in collection.\n *\n * @return {BEMQuery} Current BEMQuery instance.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.getStates = function() {\n\tif ( !this.batch ) {\n\t\tthis.batch = new Batch();\n\t}\n\n\tconst elements = this.elements;\n\n\tthis.batch.add( 'read', () => {\n\t\tconst result = [];\n\n\t\telements.forEach( ( element ) => {\n\t\t\tresult.push( processClasses( this.converter, element ) );\n\t\t} );\n\n\t\treturn result;\n\t} );\n\n\treturn this;\n};\n//# sourceMappingURL=bemquery-async-dom.js.map\n","/*! bemquery-dom-events v0.1.4 | (c) 2016 BEMQuery team | MIT license (see LICENSE) */\nimport { BEMQuery } from 'bemquery-core';\n\n/** Storage for events listeners */\nclass ListenersStorage {\n\t/**\n\t * Creates new storage for event lsiteners\n\t *\n\t * @class\n\t */\n\tconstructor() {\n\t\tthis.storage = new WeakMap();\n\t}\n\n\t/**\n\t * Adds event listener to the storage.\n\t *\n\t * @param {Object} element Element to which listener is binded.\n\t * @param {String} type Type of event.\n\t * @param {String} selector Selector for event delegation.\n\t * @param {Function} fn Original callback.\n\t * @param {Function} listener Created listener.\n\t * @return {void}\n\t */\n\tadd( element, type, selector, fn, listener ) {\n\t\tlet listeners = {};\n\n\t\tif ( this.storage.has( element ) ) {\n\t\t\tlisteners = this.storage.get( element );\n\t\t}\n\n\t\tif ( typeof listeners[ type ] === 'undefined' ) {\n\t\t\tlisteners[ type ] = {};\n\t\t}\n\n\t\tif ( typeof listeners[ type ][ selector ] === 'undefined' ) {\n\t\t\tlisteners[ type ][ selector ] = [];\n\t\t}\n\n\t\tlisteners[ type ][ selector ].push( [ fn, listener ] );\n\n\t\tthis.storage.set( element, listeners );\n\t}\n\n\t/**\n\t * Gets event listener that matches the given criteria.\n\t *\n\t * @param {Object} element Element to which listener is binded.\n\t * @param {String} type Type of event.\n\t * @param {String} selector Selector for event delegation.\n\t * @param {Function} fn Original callback.\n\t * @return {Function} Event listener.\n\t */\n\tget( element, type, selector, fn ) {\n\t\tif ( !this.storage.has( element ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst listeners = this.storage.get( element );\n\n\t\tif ( typeof listeners[ type ] === 'undefined' || typeof listeners[ type ][ selector ] === 'undefined' ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfor ( let pair of listeners[ type ][ selector ] ) { // eslint-disable-line prefer-const\n\t\t\tif ( pair[ 0 ] === fn ) {\n\t\t\t\treturn pair[ 1 ];\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes event listener that matches the given criteria.\n\t *\n\t * @param {Object} element Element to which listener is binded.\n\t * @param {String} type Type of event.\n\t * @param {String} selector Selector for event delegation.\n\t * @param {Function} fn Original callback.\n\t * @return {Function} Event listener.\n\t */\n\tremove( element, type, selector, fn ) {\n\t\tif ( !this.storage.has( element ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst listeners = this.storage.get( element );\n\n\t\tif ( typeof listeners[ type ] === 'undefined' || typeof listeners[ type ][ selector ] === 'undefined' ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlisteners[ type ][ selector ].forEach( ( pair, i ) => {\n\t\t\tif ( pair[ 0 ] === fn ) {\n\t\t\t\tlisteners[ type ][ selector ].splice( i, 1 );\n\t\t\t}\n\t\t} );\n\n\t\treturn null;\n\t}\n}\n\nconst storage = new ListenersStorage();\n\n/**\n * Method for adding event listener to the element.\n *\n * @param {String} type Type of the event.\n * @param {String|Function} selector If that parameter is a string,\n * then it's used to construct checking for the event delegation.\n * However if function is passed, then it becomes the event's listener.\n * @param {Function} callback If the second parameter is a string, this\n * function will be used as an event's listener.\n * @return {BEMQuery} Current BEMQuery instance.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.on = function( type, selector, callback ) {\n\tlet listener;\n\n\tif ( typeof type !== 'string' || !type ) {\n\t\tthrow new TypeError( 'Type of event must be a non-empty string.' );\n\t}\n\n\tif ( ( typeof selector !== 'string' && typeof selector !== 'function' ) || !selector ) {\n\t\tthrow new TypeError( 'Selector must be a non-empty string or function.' );\n\t}\n\n\tif ( typeof selector === 'string' ) {\n\t\tif ( typeof callback !== 'function' ) {\n\t\t\tthrow new TypeError( 'Callback must be a function.' );\n\t\t}\n\n\t\tselector = this.converter.convert( selector ).CSS;\n\t\tselector = `${selector}, ${selector} *`;\n\n\t\tlistener = ( evt ) => {\n\t\t\tif ( evt.target.matches( selector ) ) {\n\t\t\t\tcallback( evt );\n\t\t\t}\n\t\t};\n\t} else {\n\t\tlistener = selector;\n\t}\n\n\tthis.elements.forEach( ( element ) => {\n\t\telement.addEventListener( type, listener, false );\n\n\t\tif ( typeof selector === 'string' ) {\n\t\t\tstorage.add( element, type, selector, callback, listener );\n\t\t}\n\t} );\n\n\treturn this;\n};\n\n/**\n * Method for removing event listener from the element.\n *\n * @param {String} type Type of the event.\n * @param {String|Function} selector If that parameter is a string,\n * then it's used to construct checking for the event delegation.\n * However if function is passed, then it becomes the event's listener.\n * @param {Function} callback If the second parameter is a string, this\n * function will be used as an event's listener.\n * @return {BEMQuery} Current BEMQuery instance.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.off = function( type, selector, callback ) {\n\tlet listener;\n\n\tif ( typeof type !== 'string' || !type ) {\n\t\tthrow new TypeError( 'Type of event must be a non-empty string.' );\n\t}\n\n\tif ( ( typeof selector !== 'string' && typeof selector !== 'function' ) || !selector ) {\n\t\tthrow new TypeError( 'Selector must be a non-empty string or function.' );\n\t}\n\n\tif ( typeof selector === 'string' ) {\n\t\tif ( typeof callback !== 'function' ) {\n\t\t\tthrow new TypeError( 'Callback must be a function.' );\n\t\t}\n\n\t\tselector = this.converter.convert( selector ).CSS;\n\t\tselector = `${selector}, ${selector} *`;\n\t} else {\n\t\tlistener = selector;\n\t}\n\n\tthis.elements.forEach( ( element ) => {\n\t\tif ( typeof selector === 'string' ) {\n\t\t\tlistener = storage.get( element, type, selector, callback );\n\n\t\t\tstorage.remove( element, type, selector, callback );\n\t\t}\n\t\telement.removeEventListener( type, listener, false );\n\t} );\n\n\treturn this;\n};\n//# sourceMappingURL=bemquery-dom-events.js.map\n"],"names":["factory","bsc"],"mappings":"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"}